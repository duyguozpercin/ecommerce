import { adminDb } from '@/utils/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';

// üëá Sipari≈ü i√ßin kullanƒ±lacak veri tipi
interface OrderData {
  userId: string;
  total: number | null;
  currency: string | null;
  shippingDetails: any;
  paymentStatus: string;
  products: {
    productId: string;
    quantity: number;
  }[];
}

// üëá Stok g√ºncellemesi i√ßin kullanƒ±lacak √ºr√ºn tipi
interface StockItem {
  productId: string;
  quantity: number;
}

// ‚úÖ Firestore'a sipari≈ü kaydeden fonksiyon (G√úNCELLENMƒ∞≈û HALƒ∞)
export const createOrder = async (userId: string, orderData: OrderData) => {
  const { total, currency, shippingDetails, paymentStatus, products } = orderData;

  // --- YENƒ∞ BA≈ûLANGI√á: √úr√ºn Detaylarƒ±nƒ± √áekme ---

  // Gelen 'products' dizisindeki her bir √ºr√ºn√ºn tam bilgisini Firestore'dan √ßekiyoruz.
  const enrichedProductsPromises = products.map(async (product) => {
    const productRef = adminDb.collection('products').doc(product.productId);
    const productDoc = await productRef.get();

    if (!productDoc.exists) {
      console.error(`HATA: ${product.productId} ID'li √ºr√ºn veritabanƒ±nda bulunamadƒ±!`);
      // Eƒüer √ºr√ºn bulunamazsa, sipari≈üe yine de temel bilgileri ekle ama durumu belirt.
      return {
        ...product,
        title: '√úr√ºn Bulunamadƒ±',
        price: 0,
        brand: 'Bilinmiyor',
      };
    }

    const productData = productDoc.data()!;
    
    // Sipari≈üe kaydedilecek yeni √ºr√ºn objesini olu≈üturuyoruz.
    // Hem orijinal 'quantity' bilgisini hem de √ßektiƒüimiz detaylarƒ± birle≈ütiriyoruz.
    return {
      productId: product.productId,
      quantity: product.quantity,
      title: productData.title,
      price: productData.price,
      brand: productData.brand,
      // Varsa diƒüer alanlarƒ± da buraya ekleyebilirsin, mesela resim URL'i
      // imageUrl: productData.imageUrl || null, 
    };
  });

  // Yukarƒ±daki t√ºm √ºr√ºn √ßekme i≈ülemlerinin bitmesini bekliyoruz.
  const enrichedProducts = await Promise.all(enrichedProductsPromises);

  // --- YENƒ∞ SON ---

  const newOrderPayload = {
    userId,
    total: total ? total / 100 : 0, // Stripe kuru≈ü cinsinden g√∂nderir, TL'ye √ßevrilir
    currency,
    // Adres, telefon ve vergi bilgilerini i√ßeren shippingDetails objesini kaldƒ±rdƒ±k.
    // Yerine sadece m√º≈üteri adƒ± ve e-postasƒ±nƒ± alƒ±yoruz.
    customerName: shippingDetails?.name || 'ƒ∞sim Belirtilmemi≈ü',
    customerEmail: shippingDetails?.email || 'Email Belirtilmemi≈ü',
    paymentStatus,
    products: enrichedProducts,
    timestamp: FieldValue.serverTimestamp(),
  };

  await adminDb
    .collection('users')
    .doc(userId)
    .collection('orders')
    .add(newOrderPayload);

  console.log(`‚úÖ Firebase: Kullanƒ±cƒ± ${userId} i√ßin yeni sipari≈ü olu≈üturuldu.`);
};

// ‚úÖ Firestore'da stoklarƒ± g√ºncelleyen fonksiyon (Bu fonksiyon aynƒ± kalƒ±yor)
export const updateProductStocks = async (items: StockItem[]) => {
  if (!items?.length) {
    console.log('‚ö†Ô∏è Stoklarƒ± g√ºncellenecek √ºr√ºn bulunamadƒ±.');
    return;
  }

  const batch = adminDb.batch();

  items.forEach(({ productId, quantity }) => {
    const productRef = adminDb.collection('products').doc(productId);
    batch.update(productRef, {
      stock: FieldValue.increment(-quantity),
    });
  });

  await batch.commit();
  console.log(`‚úÖ Firestore: ${items.length} √ºr√ºn√ºn stoƒüu g√ºncellendi.`);
};

